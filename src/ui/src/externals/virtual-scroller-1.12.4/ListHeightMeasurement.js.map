{"version":3,"file":"ListHeightMeasurement.js","names":["ListHeightMeasurement","itemsContainer","getListTopOffset","previousItems","newItems","prependedItemsCount","length","_snapshot","itemIndex","itemTopOffset","getNthRenderedItemTopOffset","listTopOffset","undefined","itemTopOffsetNew","listTopOffsetNew"],"sources":["../source/ListHeightMeasurement.js"],"sourcesContent":["export default class ListHeightMeasurement {\n\tconstructor({\n\t\titemsContainer,\n\t\tgetListTopOffset\n\t}) {\n\t\tthis.itemsContainer = itemsContainer\n\t\tthis.getListTopOffset = getListTopOffset\n\t}\n\n\t/**\n\t * Snapshots the list height while `previousItems` are still rendered,\n\t * before rendering `newItems`. The list height will be re-measured\n\t * after the new items have been rendered, yielding the list height difference\n\t * which is gonna be the amount to scroll vertically in order to restore\n\t * the previous scroll position. Is only used when prepending items.\n\t * @param  {any[]} previousItems\n\t * @param  {any[]} newItems\n\t * @param  {number} prependedItemsCount\n\t */\n\tsnapshotListHeightBeforeAddingNewItems({\n\t\tpreviousItems,\n\t\tnewItems,\n\t\tprependedItemsCount\n\t}) {\n\t\t// If there were no items in the list\n\t\t// then there's no point in restoring scroll position.\n\t\tif (previousItems.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\t// If no items were prepended then no need to restore scroll position.\n\t\tif (prependedItemsCount === 0) {\n\t\t\treturn\n\t\t}\n\n\t\t// The first item is supposed to be shown when the user clicks\n\t\t// \"Show previous items\" button. If it isn't shown though,\n\t\t// could still calculate the first item's top position using\n\t\t// the values from `itemHeights` and `verticalSpacing`.\n\t\t// But that would be a weird non-realistic scenario.\n\t\t// if (firstShownItemIndex > 0) {\n\t\t// \tlet i = firstShownItemIndex - 1\n\t\t// \twhile (i >= 0) {\n\t\t// \t\tfirstItemTopOffset += itemHeights[i] + verticalSpacing\n\t\t// \t\ti--\n\t\t// \t}\n\t\t// }\n\n\t\t// This part is longer relevant: <ReactVirtualScroller/> no longer calls\n\t\t// this function two times consequtively.\n\t\t//\n\t\t// // If the scroll position has already been captured for restoration,\n\t\t// // then don't capture it the second time.\n\t\t// if (this._snapshot &&\n\t\t// \tthis._snapshot.previousItems === previousItems &&\n\t\t// \tthis._snapshot.newItems === newItems) {\n\t\t// \treturn\n\t\t// }\n\n\t\tthis._snapshot = {\n\t\t\tpreviousItems,\n\t\t\tnewItems,\n\t\t\titemIndex: prependedItemsCount,\n\t\t\titemTopOffset: this.itemsContainer.getNthRenderedItemTopOffset(0),\n\t\t\t// Snapshot list top offset inside the scrollable container too\n\t\t\t// because it's common to hide the \"Show previous items\" button\n\t\t\t// when the user has browsed to the top of the list, which causes\n\t\t\t// the list's top position to shift upwards due to the button\n\t\t\t// no longer being rendered. Tracking list top offset doesn't\n\t\t\t// fit here that well, but it makes sense in real-world applications.\n\t\t\tlistTopOffset: this.getListTopOffset()\n\t\t}\n\t}\n\n\tgetAnchorItemIndex() {\n\t\treturn this._snapshot.itemIndex\n\t}\n\n\thasSnapshot() {\n\t\treturn this._snapshot !== undefined\n\t}\n\n\tgetListBottomOffsetChange() {\n\t\tconst { itemIndex, itemTopOffset, listTopOffset } = this._snapshot\n\t\t// `firstShownItemIndex` is supposed to be `0` at this point,\n\t\t// so `renderedElementIndex` would be the same as the `itemIndex`.\n\t\tconst itemTopOffsetNew = this.itemsContainer.getNthRenderedItemTopOffset(itemIndex)\n\t\tconst listTopOffsetNew = this.getListTopOffset()\n\t\treturn (itemTopOffsetNew - itemTopOffset) + (listTopOffsetNew - listTopOffset)\n\t}\n\n\treset() {\n\t\tthis._snapshot = undefined\n\t}\n}"],"mappings":";;;;;;IAAqBA,qB;EACpB,qCAGG;IAAA,IAFFC,cAEE,QAFFA,cAEE;IAAA,IADFC,gBACE,QADFA,gBACE;;IAAA;;IACF,KAAKD,cAAL,GAAsBA,cAAtB;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACC,uDAIG;MAAA,IAHFC,aAGE,SAHFA,aAGE;MAAA,IAFFC,QAEE,SAFFA,QAEE;MAAA,IADFC,mBACE,SADFA,mBACE;;MACF;MACA;MACA,IAAIF,aAAa,CAACG,MAAd,KAAyB,CAA7B,EAAgC;QAC/B;MACA,CALC,CAOF;;;MACA,IAAID,mBAAmB,KAAK,CAA5B,EAA+B;QAC9B;MACA,CAVC,CAYF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;;MAEA,KAAKE,SAAL,GAAiB;QAChBJ,aAAa,EAAbA,aADgB;QAEhBC,QAAQ,EAARA,QAFgB;QAGhBI,SAAS,EAAEH,mBAHK;QAIhBI,aAAa,EAAE,KAAKR,cAAL,CAAoBS,2BAApB,CAAgD,CAAhD,CAJC;QAKhB;QACA;QACA;QACA;QACA;QACA;QACAC,aAAa,EAAE,KAAKT,gBAAL;MAXC,CAAjB;IAaA;;;WAED,8BAAqB;MACpB,OAAO,KAAKK,SAAL,CAAeC,SAAtB;IACA;;;WAED,uBAAc;MACb,OAAO,KAAKD,SAAL,KAAmBK,SAA1B;IACA;;;WAED,qCAA4B;MAC3B,sBAAoD,KAAKL,SAAzD;MAAA,IAAQC,SAAR,mBAAQA,SAAR;MAAA,IAAmBC,aAAnB,mBAAmBA,aAAnB;MAAA,IAAkCE,aAAlC,mBAAkCA,aAAlC,CAD2B,CAE3B;MACA;;MACA,IAAME,gBAAgB,GAAG,KAAKZ,cAAL,CAAoBS,2BAApB,CAAgDF,SAAhD,CAAzB;MACA,IAAMM,gBAAgB,GAAG,KAAKZ,gBAAL,EAAzB;MACA,OAAQW,gBAAgB,GAAGJ,aAApB,IAAsCK,gBAAgB,GAAGH,aAAzD,CAAP;IACA;;;WAED,iBAAQ;MACP,KAAKJ,SAAL,GAAiBK,SAAjB;IACA;;;;;;SA7FmBZ,qB"}