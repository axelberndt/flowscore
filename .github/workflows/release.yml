name: Build and Release on Version Change

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_changed.outputs.changed }}
      new_version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Fetch the last two commits
      - name: Get latest release version
        id: get_latest_release
        run: |
          LATEST_RELEASE_VERSION=$(curl --silent "https://api.github.com/repos/sonovice/flowscore/releases/latest" | jq -r .tag_name | tr -d 'v')
          echo "::set-output name=version::${LATEST_RELEASE_VERSION}"
        shell: bash
      - name: Check if version changed
        id: version_changed
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          if [ "$CURRENT_VERSION" != "${{ steps.get_latest_release.outputs.version }}" ]; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi
        shell: bash
      - name: Get current version
        id: get_version
        if: steps.version_changed.outputs.changed == 'true'
        run: echo "::set-output name=version::$(jq -r '.version' package.json)"
        shell: bash

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            executable: FlowScoreApp.exe
            extension: .exe
          - os: ubuntu-latest
            platform: linux
            arch: x64
            executable: FlowScoreApp
            extension: ""
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            executable: FlowScoreApp
            extension: ""
          - os: macos-latest
            platform: mac
            arch: x64
            executable: FlowScoreApp
            extension: ""
    steps:
      - uses: actions/checkout@v3

      - name: Install Bun on Linux/macOS
        if: matrix.os != 'windows-latest'
        run: |
          curl https://bun.sh/install | bash
          echo "BUN_BIN=$(echo $HOME/.bun/bin)" >> $GITHUB_ENV
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Install Bun on Windows
        if: matrix.os == 'windows-latest'
        run: |
          powershell -c "irm bun.sh/install.ps1 | iex"
          echo "C:\Users\runneradmin\.bun\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Run build
        run: |
          bun run prepare
          bun run build

      - name: Rename and upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: "FlowScore-${{ matrix.platform }}-${{ matrix.arch }}-v${{ needs.check-version.outputs.new_version }}${{ matrix.extension }}"
          path: src/${{ matrix.executable }}
          if-no-files-found: error
          retention-days: 1

  create-release:
    needs: [ check-version, build-and-release ]
    if: needs.build-and-release.result == 'success' && needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ~/artifacts

      - name: Rename and move artifacts
        run: |
          mkdir -p /home/runner/release
          for dir in ~/artifacts/*; do
            if [ -d "$dir" ]; then
              base=$(basename "$dir")
              file=$(ls "$dir")
              mv "$dir/$file" "/home/runner/release/${base}"
            fi
          done
        shell: bash

      - name: List artifacts
        run: ls -lR ~/release

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.check-version.outputs.new_version }}"
          name: "FlowScore v${{ needs.check-version.outputs.new_version }}"
          draft: false
          prerelease: false
          files: /home/runner/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
